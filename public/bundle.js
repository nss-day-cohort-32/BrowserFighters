(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _test = require("./modules/test");

var _apiCalls = require("./modules/apiCalls");

var _loginPage = require("./modules/loginPage");

var _registerUser = require("./modules/registerUser");

var _friends = require("./modules/friends");

_registerUser.regBtn;
_loginPage.login;
(0, _test.test)();
(0, _friends.friendSearch)();
_friends.searchAddFriend;

_apiCalls.API.getUsers().then(entries => console.log("allUsers", entries));

_apiCalls.API.getOneUser(1).then(entry => console.log("one user", entry));

},{"./modules/apiCalls":2,"./modules/friends":3,"./modules/loginPage":4,"./modules/registerUser":5,"./modules/test":6}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.API = void 0;

/*
    Author: Addam Joor
    Name: apiCalls.js
    Purpose: Handles calls to the database.
*/
const baseUrl = "http://localhost:8088/users";
const API = {
  getUsers: function () {
    return fetch(baseUrl).then(results => results.json());
  },
  getOneUser: function (id) {
    return fetch(`${baseUrl}/${id}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      }
    }).then(response => response.json());
  },
  registerNewUser: function (newUserObject) {
    return fetch(baseUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(newUserObject)
    }).then(response => response.json());
  },
  deleteUser: function (userId) {
    return fetch(`${baseUrl}/${userId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    }).then(response => response.json());
  },
  editUserInfo: function (userId, userObject) {
    return fetch(`${baseUrl}/${userId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(userObject)
    }).then(response => response.json());
  }
};
exports.API = API;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.friendSearch = friendSearch;

var _apiCalls = require("./apiCalls");

const friendsEl = document.getElementById("friendsContainer");

function friendSearch() {
  const friendsButton = document.getElementById("addFriendsBtn").addEventListener("click", function (event) {
    const searchFriends = document.createElement("input");
    searchFriends.setAttribute("class", "searchFriend");
    console.log("searchFriends", searchFriends);
    searchFriends.value = "Search Friends";
    document.body.appendChild(searchFriends);
    const searchFriendsButton = document.createElement("button");
    searchFriendsButton.setAttribute("class", "searchFriendsButton");
    searchFriendsButton.textContent = "Search";
    document.body.appendChild(searchFriendsButton);
    searchFriendsButton.addEventListener("click", function (event) {
      _apiCalls.API.getUsers().then(entries => {
        let findFriend;

        for (let i = 0; i < entries.length; i++) {
          const friend = entries[i];

          if (searchFriends.value === friend.user_name) {
            console.log("found matching name");
            findFriend = friend;
            break;
          } else {
            console.log("user not found");
          }
        }

        console.log(findFriend);
        let findfriendHtml = `<h2>${findFriend.user_name}</h2>
                <button>Add Friend</button>`;
        console.log(findfriendHtml);
        friendsEl.innerHTML += findfriendHtml;
      });
    });
  });
}

},{"./apiCalls":2}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.login = void 0;

var _apiCalls = require("./apiCalls");

var _registerUser = require("./registerUser");

/*
    Author: Addam Joor
    Name: loginPage.js
    Purpose: Handles login and registration.
*/
let article = document.querySelector("#article");
let navbar = document.querySelector("nav ul");
let newUserBtn = document.querySelector("#registrationBtn");
let loginBtn = document.querySelector("#login_btn");
let hiddenEmail = document.querySelector("#email");
let hiddenEmailInput = document.querySelector("#emailInput");
let hiddenUsername = document.querySelector("#confirmUsername");
let usernameInput = document.querySelector("#usernameInput");
let hiddenUsernameInput = document.querySelector("#confirmUsernameInput");
let hiddenPass = document.querySelector("#confirmPass");
let passwordInput = document.querySelector("#passwordInput");
let hiddenPassInput = document.querySelector("#confirmPasswordInput");

function isUser(user) {
  if (user.user_name === usernameInput.value && user.password === passwordInput.value) {
    return user;
  }
}

;
const login = loginBtn.addEventListener("click", function () {
  if (hiddenEmailInput.value === "") {
    _apiCalls.API.getUsers().then(users => {
      let current = users.find(user => isUser(user));

      if (current == null) {
        alert("Invalid username or password.");
        usernameInput.value = "";
        passwordInput.value = "";
        usernameInput.focus();
        return;
      }

      ;
      navbar.classList.remove("hide");
      article.classList.add("hide");
      usernameInput.value = "";
      passwordInput.value = "";
      sessionStorage.setItem(`${current.user_name}`, `${current.id}`);
      console.log(`You've logged in as ${current.user_name}`);
    });
  } else if (hiddenEmailInput.value !== "" && hiddenUsernameInput.value === usernameInput.value && hiddenPassInput.value === passwordInput.value) {
    (0, _registerUser.registerUser)();
  }
});
exports.login = login;

},{"./apiCalls":2,"./registerUser":5}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerUser = exports.regBtn = void 0;

var _apiCalls = require("./apiCalls");

/*
    Author: Addam Joor
    Name: registerUser.js
    Purpose: Registration form reveal and register new user function.
*/
let newUserBtn = document.querySelector("#registrationBtn");
let hiddenEmail = document.querySelector("#email");
let hiddenEmailInput = document.querySelector("#emailInput");
let hiddenUsername = document.querySelector("#confirmUsername");
let hiddenUsernameInput = document.querySelector("#confirmUsernameInput");
let hiddenPass = document.querySelector("#confirmPass");
let hiddenPassInput = document.querySelector("#confirmPasswordInput");
let loginBtn = document.querySelector("#login_btn");
const regBtn = newUserBtn.addEventListener("click", function () {
  console.log("New User huh?");
  hiddenEmail.classList.remove("hide");
  hiddenUsername.classList.remove("hide");
  hiddenPass.classList.remove("hide");
  newUserBtn.classList.add("hide");
  loginBtn.innerHTML = "Register";
});
exports.regBtn = regBtn;

const registerUser = () => {
  console.log("you've registered a new user");
  const newUser = {
    email_address: hiddenEmailInput.value,
    user_name: usernameInput.value,
    password: passwordInput.value
  };
  hiddenEmailInput.value = "";
  hiddenUsernameInput.value = "";
  hiddenPassInput.value = "";
  hiddenEmail.classList.add("hide");
  hiddenUsername.classList.add("hide");
  hiddenPass.classList.add("hide");
  newUserBtn.classList.remove("hide");
  loginBtn.innerHTML = "Login";

  _apiCalls.API.registerNewUser(newUser).then(() => _apiCalls.API.getUsers().then(users => console.log("new users list", users)));
};

exports.registerUser = registerUser;

},{"./apiCalls":2}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.test = void 0;

const test = function () {
  console.log("Hello, this test function is working modularly.");
};

exports.test = test;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
